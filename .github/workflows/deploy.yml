name: Deploy to Heroku

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
    types: [ closed ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
        NODE_ENV: production

    - name: Install Heroku CLI
      run: |
        curl https://cli-assets.heroku.com/install.sh | sh
        echo "/usr/local/bin" >> $GITHUB_PATH

    - name: Deploy to Heroku
      run: |
        echo "machine api.heroku.com" >> ~/.netrc
        echo "  login ${{ secrets.HEROKU_EMAIL }}" >> ~/.netrc
        echo "  password ${{ secrets.HEROKU_API_KEY }}" >> ~/.netrc
        echo "machine git.heroku.com" >> ~/.netrc
        echo "  login ${{ secrets.HEROKU_EMAIL }}" >> ~/.netrc
        echo "  password ${{ secrets.HEROKU_API_KEY }}" >> ~/.netrc
        chmod 600 ~/.netrc
        
        heroku git:remote --app ${{ secrets.HEROKU_APP_NAME }}
        
        # Set buildpack (ignore if already set)
        heroku buildpacks:set heroku/nodejs --app ${{ secrets.HEROKU_APP_NAME }} || true
        
        git config --global user.email "${{ secrets.HEROKU_EMAIL }}"
        git config --global user.name "GitHub Actions"
        
        # Force push to heroku
        git push heroku HEAD:main --force

    - name: Run database migrations on Heroku
      run: |
        echo "Waiting for deployment to complete..."
        sleep 30
        curl -X POST https://api.heroku.com/apps/${{ secrets.HEROKU_APP_NAME }}/dynos \
          -H "Authorization: Bearer ${{ secrets.HEROKU_API_KEY }}" \
          -H "Accept: application/vnd.heroku+json; version=3" \
          -H "Content-Type: application/json" \
          -d '{"command": "npx prisma migrate deploy", "attach": false}'

    - name: Health check
      run: |
        echo "Performing health check..."
        sleep 10
        curl -f https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com/ || exit 1

    - name: Record deployment success
      if: success()
      run: |
        curl -X POST "https://auth-suite.polyrhythm.tokyo/api/external/deployments" \
          -H "Authorization: Bearer ${{ secrets.DEPLOYMENT_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "applicationName": "feedback-suite.polyrhythm.tokyo",
            "environment": "${{ github.event.inputs.environment || 'production' }}",
            "version": "${{ github.ref_name }}",
            "commitHash": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "tag": "${{ github.ref_name }}",
            "deployedBy": "github-actions",
            "status": "SUCCESS",
            "workflowRunId": "${{ github.run_id }}",
            "jobId": "${{ github.job }}",
            "notes": "Heroku deployment via GitHub Actions",
            "metadata": {
              "repository": "${{ github.repository }}",
              "actor": "${{ github.actor }}",
              "platform": "heroku",
              "appName": "${{ secrets.HEROKU_APP_NAME }}",
              "deploymentUrl": "https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com"
            }
          }'

    - name: Record deployment failure
      if: failure()
      run: |
        curl -X POST "https://auth-suite.polyrhythm.tokyo/api/external/deployments" \
          -H "Authorization: Bearer ${{ secrets.DEPLOYMENT_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "applicationName": "feedback-suite.polyrhythm.tokyo",
            "environment": "${{ github.event.inputs.environment || 'production' }}",
            "version": "${{ github.ref_name }}",
            "commitHash": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "tag": "${{ github.ref_name }}",
            "deployedBy": "github-actions",
            "status": "FAILED",
            "workflowRunId": "${{ github.run_id }}",
            "jobId": "${{ github.job }}",
            "notes": "Heroku deployment failed via GitHub Actions",
            "metadata": {
              "repository": "${{ github.repository }}",
              "actor": "${{ github.actor }}",
              "platform": "heroku",
              "appName": "${{ secrets.HEROKU_APP_NAME }}"
            }
          }'

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment successful!"
          echo "üåê App URL: https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com"
        else
          echo "‚ùå Deployment failed!"
        fi 