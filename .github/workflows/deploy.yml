name: Deploy to Heroku

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch')
    permissions:
      contents: read
      packages: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Configure npm for GitHub Packages
      run: |
        # .npmrcファイルを作成してGitHub Packagesの認証を設定
        echo "@polyrhythm-inc:registry=https://npm.pkg.github.com" > .npmrc
        echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> .npmrc
        
        echo "npm config for GitHub Packages set"

    - name: Install dependencies
      run: |
        # package-lock.jsonが存在する場合はnpm ciを使用（高速で再現性が高い）
        # 存在しない場合はnpm installを使用してpackage-lock.jsonを生成
        if [ -f "package-lock.json" ]; then
          echo "Using npm ci for faster, reproducible installation"
          npm ci
        else
          echo "package-lock.json not found, using npm install"
          npm install
          echo "package-lock.json has been generated"
        fi

    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        # 環境変数はすべてシークレットから取得（直接記述しない）
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}

    - name: Install Heroku CLI
      run: |
        curl https://cli-assets.heroku.com/install.sh | sh
        echo "/usr/local/bin" >> $GITHUB_PATH

    - name: Deploy to Heroku
      id: deploy
      run: |
        # Set up Heroku API key authentication (セキュリティ強化)
        cat > ~/.netrc << EOF
        machine api.heroku.com
          login ${{ secrets.HEROKU_EMAIL }}
          password ${{ secrets.HEROKU_API_KEY }}
        machine git.heroku.com
          login ${{ secrets.HEROKU_EMAIL }}
          password ${{ secrets.HEROKU_API_KEY }}
        EOF
        chmod 600 ~/.netrc
        
        # Set HEROKU_API_KEY environment variable (シークレットから取得)
        export HEROKU_API_KEY=${{ secrets.HEROKU_API_KEY }}
        
        # Add Heroku remote
        git remote add heroku https://git.heroku.com/${{ secrets.HEROKU_APP_NAME }}.git || true
        
        # Set buildpack (ignore if already set)
        heroku buildpacks:set heroku/nodejs --app ${{ secrets.HEROKU_APP_NAME }} || true
        
        git config --global user.email "${{ secrets.HEROKU_EMAIL }}"
        git config --global user.name "GitHub Actions"
        
        # Force push to heroku
        git push heroku HEAD:main --force

    - name: Run database migrations on Heroku
      run: |
        # Set HEROKU_API_KEY environment variable
        export HEROKU_API_KEY=${{ secrets.HEROKU_API_KEY }}
        
        echo "Waiting for deployment to complete..."
        sleep 30
        
        # Try to run migrations
        echo "Running database migrations..."
        heroku run "npx prisma migrate deploy" --app ${{ secrets.HEROKU_APP_NAME }} || {
          echo "Migration failed, attempting to resolve..."
          heroku run "npx prisma migrate resolve --rolled-back" --app ${{ secrets.HEROKU_APP_NAME }} || true
          heroku run "npx prisma migrate deploy" --app ${{ secrets.HEROKU_APP_NAME }}
        }

    - name: Health check
      run: |
        # アプリケーション変数を環境変数から取得（ハードコード回避）
        APP_NAME="${{ secrets.HEROKU_APP_NAME }}"
        WEB_URL="https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com/"
        
        echo "Performing health check..."
        echo "App Name: $APP_NAME"
        echo "Target URL: $WEB_URL"
        sleep 10
        curl -f $WEB_URL || exit 1

    - name: Record deployment success
      if: success()
      run: |
        curl -X POST "https://auth-suite.polyrhythm.tokyo/api/external/deployments" \
          -H "Authorization: Bearer ${{ secrets.DEPLOYMENT_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "applicationName": "feedback-suite.polyrhythm.tokyo",
            "environment": "${{ github.event.inputs.environment || 'production' }}",
            "version": "${{ github.ref_name }}",
            "commitHash": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "tag": "${{ github.ref_name }}",
            "deployedBy": "github-actions",
            "status": "SUCCESS",
            "workflowRunId": "${{ github.run_id }}",
            "jobId": "${{ github.job }}",
            "notes": "Heroku deployment via GitHub Actions",
            "metadata": {
              "repository": "${{ github.repository }}",
              "actor": "${{ github.actor }}",
              "platform": "heroku",
              "appName": "${{ secrets.HEROKU_APP_NAME }}",
              "deploymentUrl": "https://feedback-a9cba1104830.herokuapp.com"
            }
          }'

    - name: Record deployment failure
      if: failure()
      run: |
        curl -X POST "https://auth-suite.polyrhythm.tokyo/api/external/deployments" \
          -H "Authorization: Bearer ${{ secrets.DEPLOYMENT_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "applicationName": "feedback-suite.polyrhythm.tokyo",
            "environment": "${{ github.event.inputs.environment || 'production' }}",
            "version": "${{ github.ref_name }}",
            "commitHash": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "tag": "${{ github.ref_name }}",
            "deployedBy": "github-actions",
            "status": "FAILED",
            "workflowRunId": "${{ github.run_id }}",
            "jobId": "${{ github.job }}",
            "notes": "Heroku deployment failed via GitHub Actions",
            "metadata": {
              "repository": "${{ github.repository }}",
              "actor": "${{ github.actor }}",
              "platform": "heroku",
              "appName": "${{ secrets.HEROKU_APP_NAME }}"
            }
          }'

    - name: Send error feedback to API
      if: failure()
      run: |
        # エラー詳細を収集
        ERROR_MESSAGE="GitHub Actions deployment failed"
        if [ -n "${{ steps.deploy.outputs.error }}" ]; then
          ERROR_MESSAGE="${{ steps.deploy.outputs.error }}"
        fi
        
        # JSONペイロードを作成
        PAYLOAD=$(cat <<EOF
        {
          "comment": "Heroku deployment failed via GitHub Actions. 詳細はGithub Actionsの実行URLにあるIDについて、ghコマンドで参照してください",
          "githubRepository": "${{ github.repository }}",
          "timestamp": $(date +%s)000,
          "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
          "errorDetails": {
            "pageUrl": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "workflow": "${{ github.workflow }}",
            "job": "${{ github.job }}",
            "branch": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}",
            "runId": "${{ github.run_id }}",
            "runNumber": "${{ github.run_number }}",
            "actor": "${{ github.actor }}",
            "errorMessage": "$ERROR_MESSAGE"
          }
        }
        EOF
        )
        
        # APIにPOSTリクエストを送信
        curl -X POST https://feedback-suite.polyrhythm.tokyo/api/feedback \
          -H "Content-Type: application/json" \
          -d "$PAYLOAD" \
          --fail-with-body || echo "Failed to send feedback to API"

    - name: Notify deployment status
      if: always()
      run: |
        # アプリケーション変数を環境変数から取得
        APP_NAME="${{ secrets.HEROKU_APP_NAME }}"
        WEB_URL="https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com/"
        
        echo "App Name: $APP_NAME"
        echo "Job Status: ${{ job.status }}"
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful!"
          echo "🌐 App URL: $WEB_URL"
        else
          echo "❌ Deployment failed!"
          echo "🔗 Check logs: $WEB_URL"
        fi

    - name: Send Slack notification on success
      if: success()
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "text": "✅ デプロイ成功",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "✅ Feedback Nextjs デプロイ成功"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*アプリケーション:*\nfeedback-suite.polyrhythm.tokyo"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*環境:*\n${{ github.event.inputs.environment || 'production' }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*ブランチ:*\n${{ github.ref_name }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*コミット:*\n${{ github.sha }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*実行者:*\n${{ github.actor }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*URL:*\n<https://feedback-a9cba1104830.herokuapp.com|アプリケーションを開く>"
                  }
                ]
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "GitHub Actions • <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|ワークフローを表示>"
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

    - name: Send Slack notification on failure
      if: failure()
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "text": "❌ デプロイ失敗",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "❌ Feedback Nextjs デプロイ失敗"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*アプリケーション:*\nfeedback-suite.polyrhythm.tokyo"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*環境:*\n${{ github.event.inputs.environment || 'production' }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*ブランチ:*\n${{ github.ref_name }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*コミット:*\n${{ github.sha }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*実行者:*\n${{ github.actor }}"
                  }
                ]
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "⚠️ *デプロイメントに失敗しました。ワークフローのログを確認してください。*"
                }
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "GitHub Actions • <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|ワークフローを表示>"
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK 