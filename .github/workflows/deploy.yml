name: Deploy to Heroku

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate GitHub App Token
      id: app-token
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ secrets.APP_ID }}
        private-key: ${{ secrets.APP_PRIVATE_KEY }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Configure npm for GitHub Packages
      run: |
        # .npmrc„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê„Åó„Å¶GitHub Packages„ÅÆË™çË®º„ÇíË®≠ÂÆö
        echo "@polyrhythm-inc:registry=https://npm.pkg.github.com" > .npmrc
        echo "//npm.pkg.github.com/:_authToken=${{ steps.app-token.outputs.token }}" >> .npmrc
        
        echo "npm config for GitHub Packages set"

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
        NODE_ENV: production

    - name: Install Heroku CLI
      run: |
        curl https://cli-assets.heroku.com/install.sh | sh
        echo "/usr/local/bin" >> $GITHUB_PATH

    - name: Deploy to Heroku
      run: |
        echo "machine api.heroku.com" >> ~/.netrc
        echo "  login ${{ secrets.HEROKU_EMAIL }}" >> ~/.netrc
        echo "  password ${{ secrets.HEROKU_API_KEY }}" >> ~/.netrc
        echo "machine git.heroku.com" >> ~/.netrc
        echo "  login ${{ secrets.HEROKU_EMAIL }}" >> ~/.netrc
        echo "  password ${{ secrets.HEROKU_API_KEY }}" >> ~/.netrc
        chmod 600 ~/.netrc
        
        heroku git:remote --app ${{ secrets.HEROKU_APP_NAME }}
        
        # Set buildpack (ignore if already set)
        heroku buildpacks:set heroku/nodejs --app ${{ secrets.HEROKU_APP_NAME }} || true
        
        git config --global user.email "${{ secrets.HEROKU_EMAIL }}"
        git config --global user.name "GitHub Actions"
        
        # Force push to heroku
        git push heroku HEAD:main --force

    - name: Run database migrations on Heroku
      run: |
        echo "Waiting for deployment to complete..."
        sleep 30
        
        # Try to run migrations
        echo "Running database migrations..."
        heroku run "npx prisma migrate deploy" --app ${{ secrets.HEROKU_APP_NAME }} || {
          echo "Migration failed, attempting to resolve..."
          heroku run "npx prisma migrate resolve --rolled-back" --app ${{ secrets.HEROKU_APP_NAME }} || true
          heroku run "npx prisma migrate deploy" --app ${{ secrets.HEROKU_APP_NAME }}
        }

    - name: Health check
      run: |
        # Set app variables
        APP_NAME="feedback"
        WEB_URL="https://feedback-a9cba1104830.herokuapp.com/"
        
        echo "Performing health check..."
        echo "App Name: $APP_NAME"
        echo "Target URL: $WEB_URL"
        sleep 10
        curl -f $WEB_URL || exit 1

    - name: Record deployment success
      if: success()
      run: |
        curl -X POST "https://auth-suite.polyrhythm.tokyo/api/external/deployments" \
          -H "Authorization: Bearer ${{ secrets.DEPLOYMENT_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "applicationName": "feedback-suite.polyrhythm.tokyo",
            "environment": "${{ github.event.inputs.environment || 'production' }}",
            "version": "${{ github.ref_name }}",
            "commitHash": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "tag": "${{ github.ref_name }}",
            "deployedBy": "github-actions",
            "status": "SUCCESS",
            "workflowRunId": "${{ github.run_id }}",
            "jobId": "${{ github.job }}",
            "notes": "Heroku deployment via GitHub Actions",
            "metadata": {
              "repository": "${{ github.repository }}",
              "actor": "${{ github.actor }}",
              "platform": "heroku",
              "appName": "${{ secrets.HEROKU_APP_NAME }}",
              "deploymentUrl": "https://feedback-a9cba1104830.herokuapp.com"
            }
          }'

    - name: Record deployment failure
      if: failure()
      run: |
        curl -X POST "https://auth-suite.polyrhythm.tokyo/api/external/deployments" \
          -H "Authorization: Bearer ${{ secrets.DEPLOYMENT_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "applicationName": "feedback-suite.polyrhythm.tokyo",
            "environment": "${{ github.event.inputs.environment || 'production' }}",
            "version": "${{ github.ref_name }}",
            "commitHash": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "tag": "${{ github.ref_name }}",
            "deployedBy": "github-actions",
            "status": "FAILED",
            "workflowRunId": "${{ github.run_id }}",
            "jobId": "${{ github.job }}",
            "notes": "Heroku deployment failed via GitHub Actions",
            "metadata": {
              "repository": "${{ github.repository }}",
              "actor": "${{ github.actor }}",
              "platform": "heroku",
              "appName": "${{ secrets.HEROKU_APP_NAME }}"
            }
          }'

    - name: Send error details to Feedback API
      if: failure()
      run: |
        # „Ç®„É©„ÉºË©≥Á¥∞„ÇíÂèéÈõÜ
        ERROR_MESSAGE="GitHub Actions deployment failed for feedback-suite.polyrhythm.tokyo"
        WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
        # „Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØAPI„Å´„Ç®„É©„Éº„ÇíÈÄÅ‰ø°
        curl -X POST "https://feedback-suite.polyrhythm.tokyo/api/feedback" \
          -H "Content-Type: application/json" \
          -d '{
            "comment": "[Ëá™Âãï„Ç®„É©„ÉºÂ†±Âëä] '"$ERROR_MESSAGE"'",
            "timestamp": '"$(date +%s)000"',
            "errorDetails": {
              "source": "github-actions-deploy",
              "repository": "'"${{ github.repository }}"'",
              "workflow": "Deploy to Heroku",
              "workflowRunId": "'"${{ github.run_id }}"'",
              "jobId": "'"${{ github.job }}"'",
              "branch": "'"${{ github.ref_name }}"'",
              "commitHash": "'"${{ github.sha }}"'",
              "actor": "'"${{ github.actor }}"'",
              "environment": "'"${{ github.event.inputs.environment || 'production' }}"'",
              "platform": "heroku",
              "appName": "'"${{ secrets.HEROKU_APP_NAME }}"'",
              "workflowUrl": "'"$WORKFLOW_URL"'",
              "failedStep": "Unknown"
            }
          }' || echo "Warning: Failed to send error to Feedback API"

    - name: Notify deployment status
      if: always()
      run: |
        # Set app variables
        APP_NAME="feedback"
        WEB_URL="https://feedback-a9cba1104830.herokuapp.com/"
        
        echo "App Name: $APP_NAME"
        echo "Job Status: ${{ job.status }}"
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment successful!"
          echo "üåê App URL: $WEB_URL"
        else
          echo "‚ùå Deployment failed!"
          echo "üîó Check logs: $WEB_URL"
        fi

    - name: Send Slack notification on success
      if: success()
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "text": "‚úÖ „Éá„Éó„É≠„Ç§ÊàêÂäü",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "‚úÖ Feedback Nextjs „Éá„Éó„É≠„Ç§ÊàêÂäü"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥:*\nfeedback-suite.polyrhythm.tokyo"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Áí∞Â¢É:*\n${{ github.event.inputs.environment || 'production' }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*„Éñ„É©„É≥„ÉÅ:*\n${{ github.ref_name }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*„Ç≥„Éü„ÉÉ„Éà:*\n${{ github.sha }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*ÂÆüË°åËÄÖ:*\n${{ github.actor }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*URL:*\n<https://feedback-a9cba1104830.herokuapp.com|„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíÈñã„Åè>"
                  }
                ]
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "GitHub Actions ‚Ä¢ <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÇíË°®Á§∫>"
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

    - name: Send Slack notification on failure
      if: failure()
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "text": "‚ùå „Éá„Éó„É≠„Ç§Â§±Êïó",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "‚ùå Feedback Nextjs „Éá„Éó„É≠„Ç§Â§±Êïó"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥:*\nfeedback-suite.polyrhythm.tokyo"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Áí∞Â¢É:*\n${{ github.event.inputs.environment || 'production' }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*„Éñ„É©„É≥„ÉÅ:*\n${{ github.ref_name }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*„Ç≥„Éü„ÉÉ„Éà:*\n${{ github.sha }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*ÂÆüË°åËÄÖ:*\n${{ github.actor }}"
                  }
                ]
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "‚ö†Ô∏è *„Éá„Éó„É≠„Ç§„É°„É≥„Éà„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÅÆ„É≠„Ç∞„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ*"
                }
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "GitHub Actions ‚Ä¢ <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÇíË°®Á§∫>"
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK 