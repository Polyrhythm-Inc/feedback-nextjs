name: Deploy to Heroku

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
    types: [ closed ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: feedback_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'feedback-nextjs/package-lock.json'

    - name: Install dependencies
      run: npm ci
      working-directory: feedback-nextjs

    - name: Generate Prisma Client
      run: npx prisma generate
      working-directory: feedback-nextjs
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/feedback_test

    - name: Run database migrations
      run: npx prisma migrate deploy
      working-directory: feedback-nextjs
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/feedback_test

    - name: Run tests
      run: npm test
      working-directory: feedback-nextjs
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/feedback_test
        AWS_REGION: ap-northeast-1
        AWS_ACCESS_KEY_ID: test-key
        AWS_SECRET_ACCESS_KEY: test-secret
        AWS_S3_BUCKET_NAME: test-bucket

    - name: Run linting
      run: npm run lint
      working-directory: feedback-nextjs

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true))

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'feedback-nextjs/package-lock.json'

    - name: Install dependencies
      run: npm ci
      working-directory: feedback-nextjs

    - name: Build application
      run: npm run build
      working-directory: feedback-nextjs
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
        NODE_ENV: production

    - name: Deploy to Heroku
      uses: akhileshns/heroku-deploy@v3.13.15
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        buildpack: "heroku/nodejs"
        appdir: "feedback-nextjs"

    - name: Run database migrations on Heroku
      run: |
        echo "Waiting for deployment to complete..."
        sleep 30
        curl -X POST https://api.heroku.com/apps/${{ secrets.HEROKU_APP_NAME }}/dynos \
          -H "Authorization: Bearer ${{ secrets.HEROKU_API_KEY }}" \
          -H "Accept: application/vnd.heroku+json; version=3" \
          -H "Content-Type: application/json" \
          -d '{"command": "npx prisma migrate deploy", "attach": false}'

    - name: Health check
      run: |
        echo "Performing health check..."
        sleep 10
        curl -f https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com/ || exit 1

    - name: Record deployment success
      if: success()
      run: |
        curl -X POST "https://auth-suite.polyrhythm.tokyo/api/external/deployments" \
          -H "Authorization: Bearer ${{ secrets.DEPLOYMENT_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "applicationName": "feedback-suite.polyrhythm.tokyo",
            "environment": "production",
            "version": "${{ github.ref_name }}",
            "commitHash": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "tag": "${{ github.ref_name }}",
            "deployedBy": "github-actions",
            "status": "SUCCESS",
            "workflowRunId": "${{ github.run_id }}",
            "jobId": "${{ github.job }}",
            "notes": "Heroku deployment via GitHub Actions",
            "metadata": {
              "repository": "${{ github.repository }}",
              "actor": "${{ github.actor }}",
              "platform": "heroku",
              "appName": "${{ secrets.HEROKU_APP_NAME }}",
              "deploymentUrl": "https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com"
            }
          }'

    - name: Record deployment failure
      if: failure()
      run: |
        curl -X POST "https://auth-suite.polyrhythm.tokyo/api/external/deployments" \
          -H "Authorization: Bearer ${{ secrets.DEPLOYMENT_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "applicationName": "feedback-suite.polyrhythm.tokyo",
            "environment": "production",
            "version": "${{ github.ref_name }}",
            "commitHash": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "tag": "${{ github.ref_name }}",
            "deployedBy": "github-actions",
            "status": "FAILED",
            "workflowRunId": "${{ github.run_id }}",
            "jobId": "${{ github.job }}",
            "notes": "Heroku deployment failed via GitHub Actions",
            "metadata": {
              "repository": "${{ github.repository }}",
              "actor": "${{ github.actor }}",
              "platform": "heroku",
              "appName": "${{ secrets.HEROKU_APP_NAME }}"
            }
          }'

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment successful!"
          echo "üåê App URL: https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com"
        else
          echo "‚ùå Deployment failed!"
        fi 